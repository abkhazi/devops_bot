version: '3.8'

services:
  postgres_primary:
    container_name: db_image
    build:
      context: ./db
      dockerfile: Dockerfile
    user: postgres
    restart: always
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c log_replication_commands=on

  postgres_replica:
    container_name: db_repl_image
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    user: postgres
    restart: always
    ports:
      - ${DB_REPL_PORT}:5432
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=${DB_HOST} --port=${DB_PORT}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary

  bot:
    container_name: bot_image
    build:
      context: ./bot
      dockerfile: Dockerfile
    environment:
      TOKEN: ${TOKEN}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      RM_HOST: ${RM_HOST}
      RM_PORT: ${RM_PORT}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
