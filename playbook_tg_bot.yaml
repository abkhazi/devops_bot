---
- hosts: host01
  become: yes

  tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - postgresql-{{ postgresql_version }}
        - postgresql-contrib-{{ postgresql_version }}
        - python3-psycopg2

    - name: Запуск службы PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Настройка listen addresses
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = '*'"
        state: present          
       

    - name: Настройка параметра wal_level
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?wal_level'
        line: 'wal_level = replica'
        state: present

    - name: Настройка параметра hot_standby
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?hot_standby'
        line: 'hot_standby = on'
        state: present

    - name: Настройка параметра max_wal_senders
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?max_wal_senders'
        line: 'max_wal_senders = 10'
        state: present

    - name: Настройка параметра max_replication_slots
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?max_replication_slots'
        line: 'max_replication_slots = 10'
        state: present

    - name: Настройка параметра hot_standby_feedback
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?hot_standby_feedback'
        line: 'hot_standby_feedback = on'
        state: present

    - name: Настройка параметра log_replication_commands
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?log_replication_commands'
        line: 'log_replication_commands = on'
        state: present

    - name: Ожидание запуска PostgreSQL
      wait_for:
        port: 5432
        timeout: 60

    - name: Добавить scram-sha-256 метод аутентификации для db user
      postgresql_pg_hba:
        dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        contype: host
        databases: all
        method: scram-sha-256
        users: "{{ db_master_user }}"
        address: "0.0.0.0/0"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: "Add replication method"
      postgresql_pg_hba:
        dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        contype: host
        databases: replication
        method: md5
        users: all
        address: "0.0.0.0/0"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Change permissions for postgresql.log
      become: yes
      file:
        path: /var/log/postgresql/postgresql-{{ postgresql_version }}-main.log
        mode: '0644'

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_master_user }}"
        password: "{{ db_master_password }}"
      become: yes
      become_user: postgres    

    - name: "Create bot database"
      postgresql_db:
        state: present
        name: "{{ db_master_database }}"
      become: yes
      become_user: postgres  

    - name: "Grant db user access to bot db"
      postgresql_privs:
        type: database
        database: "{{ db_master_database }}"
        roles: "{{ db_master_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres            

    - name: Create replication user
      command: >
        psql -U postgres -d tg_bot -c "DROP USER IF EXISTS {{db_repl_user}}; CREATE USER {{db_repl_user}} REPLICATION LOGIN ENCRYPTED PASSWORD '{{db_repl_password}}';"
      become: yes 
      become_user: postgres  
    
    - name: Create emails table
      postgresql_table:
        db: "{{ db_master_database }}"
        name: emails
        columns:
        - id serial primary key
        - email varchar(100) not null
      become: yes 
      become_user: postgres 

    - name: Create phone_numbers table
      postgresql_table:
        db: "{{ db_master_database }}"
        name: phone_numbers
        columns:
        - id serial primary key
        - phone varchar(20) not null
      become: yes 
      become_user: postgres       

 
  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted

- hosts: host02
  become: yes

  tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - postgresql-{{ postgresql_version }}
        - postgresql-contrib-{{ postgresql_version }}
        - python3-pexpect

    - name: Настройка listen addresses
      lineinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = 'localhost, {{ db_repl_host }}'"
        state: present     

    - name: Stop PostgreSQL
      service:
        name: postgresql
        state: stopped     

    - name: Удаление предыдущих данных PostgreSQL
      file:
        path: "/var/lib/postgresql/{{ postgresql_version }}/main/"
        state: absent
      become: yes
      become_user: postgres    

    - name: Создание репликации базы данных
      command: "pg_basebackup -R -h {{ db_master_host }} -U {{ db_repl_user }} -D /var/lib/postgresql/{{ postgresql_version }}/main -P"
      become: yes
      become_user: postgres      
      register: result
      until: result is not failed
      retries: 3
      delay: 5
      environment:
        PGUSER: "{{ db_repl_user }}"
        PGPASSWORD: "{{ db_repl_password }}" 

    - name: Start PostgreSQL
      service:
        name: postgresql
        state: started

- hosts: host03
  become: yes

  tasks:

  - name: "Install Python"
    apt: "name={{ item }} state=present"
    with_items:
      - python3
      - python3-pip
      - python3-venv
      - git

  - name: "Clone git repo"
    git:
      repo: "{{bot_repo}}"
      dest: ~/{{item.repo_dir}}
      clone: yes
      update: yes
    with_items:
      - {repo_dir: devops_bot}    

  - name: "Environment variables for bot"
    copy:
       src: .env
       dest: "~/{{item.repo_dir}}"
    become: yes   
    with_items:
       - {repo_dir: devops_bot}        

  - name: "Install dependencies" 
    shell: python3 -m venv ~/myenv && source ~/myenv/bin/activate && pip install --no-cache-dir -r ~/{{item.repo_dir}}/requirements.txt 
    become: yes
    args:
     executable: /bin/bash
    with_items:
      - {repo_dir: devops_bot}     

  - name: "Run bot" 
    shell: source ~/myenv/bin/activate && python3 ~/{{item.repo_dir}}/bot.py 
    become: yes
    args:
       executable: /bin/bash
    with_items:
     - {repo_dir: devops_bot}     


